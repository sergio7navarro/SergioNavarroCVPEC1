"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _plugin() {
  const data = require("@parcel/plugin");

  _plugin = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = new (_plugin().Transformer)({
  async transform({
    asset,
    options,
    resolve
  }) {
    asset.type = 'js';
    let glslifyDeps = await options.packageManager.require('glslify-deps', asset.filePath, {
      shouldAutoInstall: options.shouldAutoInstall
    }); // Parse and collect dependencies with glslify-deps

    let cwd = _path().default.dirname(asset.filePath);

    let depper = glslifyDeps({
      cwd,
      resolve: async (target, opts, next) => {
        try {
          let filePath = await resolve(asset.filePath, target);
          next(null, filePath);
        } catch (err) {
          next(err);
        }
      }
    });
    let ast = await (0, _utils().promisify)(depper.inline.bind(depper))(await asset.getCode(), cwd);
    let glslifyBundle = await options.packageManager.require('glslify-bundle', asset.filePath, {
      shouldAutoInstall: options.shouldAutoInstall
    });
    collectDependencies(asset, ast); // Generate the bundled glsl file

    let glsl = await glslifyBundle(ast);
    asset.setCode(`module.exports=${JSON.stringify(glsl)};`);
    return [asset];
  }

});

exports.default = _default;

function collectDependencies(asset, ast) {
  for (let dep of ast) {
    if (!dep.entry) {
      asset.addIncludedFile(dep.file);
    }
  }
}